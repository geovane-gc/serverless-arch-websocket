AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Template for a SAM Test Websocket"

###################################################
# - Parameters
###################################################
Parameters:
  Env:
    Type: String
    AllowedValues:
      - dev
      - intg
      - sbox
      - prd
    Description: Environment in which the application will be deployed. Allowed values [dev, intg, sbox, prd]
    Default: dev

###################################################
# - Mappings
###################################################
Mappings:
  EnvMap:
    dev:
      LogsMap: Deny
    intg:
      LogsMap: Deny
    sbox:
      LogsMap: Deny
    prd:
      LogsMap: Allow

###################################################
# - Globals
###################################################
Globals:
  Function:
    Timeout: 120
    MemorySize: 256
    CodeUri: src/
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    Environment:
      Variables:
        API_VERSION: "2018-11-29"
        DEFAULT_REGION: !Ref AWS::Region
    Tags:
      env: !Ref Env

###################################################
# - Conditions
###################################################
Conditions:
  IsEnvProvided: !Not [!Equals [!Ref Env, ""]]

###################################################
# - Resources
###################################################
Resources:
  SamTestWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: sam-test-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      Tags:
        env: "dev"

  # SamTestWSSocketRule:
  #   Type: "AWS::Events::Rule"
  #   Properties:
  #     Name: SamTestWSSocketRule
  #     Description: "Rule to trigger lambda when a new message is sent to the websocket"
  #     EventBusName: "default" # !ImportValue SamTestEventBusArn
  #     EventPattern:
  #       source:
  #         - "sam-test.websocket"
  #       detail-type:
  #         - "sam-test.webSocket.message"
  #     State: ENABLED
  #     Targets:
  #       - Arn: !GetAtt wsSendMessageTickerAndTickers.Arn
  #         Id: WSSendMessageTickerAndTickersTarget

  # Auth:
  #   Type: "AWS::ApiGatewayV2::Authorizer"
  #   Properties:
  #     IdentitySource:
  #       - "route.request.querystring.token"
  #     Name: wsAuth
  #     ApiId: !Ref SamTestWebSocketApi
  #     AuthorizerType: REQUEST
  #     AuthorizerUri: !Join
  #       - ""
  #       - - "arn:aws:apigateway:"
  #         - !Ref AWS::Region
  #         - ":lambda:path/2015-03-31/functions/"
  #         - !ImportValue LiqiUsersApiKeyAuthorizerWebsocketFunctionArn
  #         - "/invocations"
  # AuthLambdaPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !ImportValue LiqiUsersApiKeyAuthorizerWebsocketFunctionArn
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SamTestWebSocketApi}/*

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - SamTestWebSocketApi
      - ConnectRoute
    Properties:
      ApiId: !Ref SamTestWebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref SamTestWebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: development

  wsConnect:
    Type: AWS::Serverless::Function
    # Connectors:
    #   ConnTableManager:
    #     Properties:
    #       Destination:
    #         - Type: AWS::DynamoDB::Table
    #           Arn:
    #             Fn::ImportValue: SamTestWebSocketTableArn
    #       Permissions:
    #         - Read
    #         - Write
    Properties:
      FunctionName: SamTestWebsocketWSConnect
      Tags:
        service: "SamTestWebsocketWSConnect"
      Handler: wsConnect.handler
      Runtime: nodejs18.x
      # Environment:
      #   Variables:
      #     DATABASE_NAME:
      #       Fn::ImportValue: SamTestWebSocketTableName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "arn:aws:logs:*:*:*"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        EntryPoints:
          - lambdas/wsConnect.ts

  ConnectRoute:
    Type: "AWS::ApiGatewayV2::Route"
    DependsOn: ConnectLambdaIntegration
    Properties:
      ApiId: !Ref SamTestWebSocketApi
      RouteKey: "$connect"
      # AuthorizationType: CUSTOM
      OperationName: ConnectRoute
      # AuthorizerId: !Ref Auth
      Target: !Sub "integrations/${ConnectLambdaIntegration}"

  ConnectLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SamTestWebSocketApi
      Description: Connect
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${wsConnect.Arn}/invocations

  wsConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn: wsConnect
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt wsConnect.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SamTestWebSocketApi}/*

  # wsDisconnect:
  #   Type: AWS::Serverless::Function
  #   Connectors:
  #     ConnTableManager:
  #       Properties:
  #         Destination:
  #           - Type: AWS::DynamoDB::Table
  #             Arn:
  #               Fn::ImportValue: SamTestWebSocketTableArn
  #         Permissions:
  #           - Read
  #           - Write
  #   Properties:
  #     FunctionName: SamTestWebsocketWSDisconnect
  #     Tags:
  #       service: "SamTestWebsocketWSDisconnect"
  #     Handler: wsDisconnect.handler
  #     Runtime: nodejs16.x
  #     Environment:
  #       Variables:
  #         DATABASE_NAME:
  #           Fn::ImportValue: SamTestWebSocketTableName
  #     Policies:
  #       - Version: "2012-10-17"
  #         Statement:
  #           - Effect: !If
  #               - IsEnvProvided
  #               - !FindInMap [EnvMap, !Ref Env, LogsMap]
  #               - "Allow"
  #             Action:
  #               - "logs:CreateLogGroup"
  #               - "logs:CreateLogStream"
  #               - "logs:PutLogEvents"
  #             Resource: "arn:aws:logs:*:*:*"
  #   Metadata:
  #     BuildMethod: esbuild
  #     BuildProperties:
  #       Minify: true
  #       Target: es2020
  #       EntryPoints:
  #         - lambdas/wsDisconnect.ts
  #       External:
  #         - aws-sdk
  # DisconnectRoute:
  #   Type: "AWS::ApiGatewayV2::Route"
  #   Properties:
  #     ApiId: !Ref SamTestWebSocketApi
  #     RouteKey: "$disconnect"
  #     Target: !Sub "integrations/${DisconnectLambdaIntegration}"
  # DisconnectLambdaIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref SamTestWebSocketApi
  #     Description: Disconnect
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${wsDisconnect.Arn}/invocations
  # wsDisconnectPermission:
  #   Type: AWS::Lambda::Permission
  #   DependsOn: wsDisconnect
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt wsDisconnect.Arn
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SamTestWebSocketApi}/*
  # wsDefault:
  #   Type: AWS::Serverless::Function
  #   Connectors:
  #     ConnTableManager:
  #       Properties:
  #         Destination:
  #           - Type: AWS::DynamoDB::Table
  #             Arn:
  #               Fn::ImportValue: SamTestWebSocketTableArn
  #         Permissions:
  #           - Read
  #           - Write
  #   Properties:
  #     FunctionName: SamTestWebsocketWSDefault
  #     Tags:
  #       service: "SamTestWebsocketWSDefault"
  #     Handler: wsDefault.handler
  #     Runtime: nodejs16.x
  #     Environment:
  #       Variables:
  #         DATABASE_NAME:
  #           Fn::ImportValue: SamTestWebSocketTableName
  #     Policies:
  #       - Version: "2012-10-17"
  #         Statement:
  #           - Effect: !If
  #               - IsEnvProvided
  #               - !FindInMap [EnvMap, !Ref Env, LogsMap]
  #               - "Allow"
  #             Action:
  #               - "logs:CreateLogGroup"
  #               - "logs:CreateLogStream"
  #               - "logs:PutLogEvents"
  #             Resource: "arn:aws:logs:*:*:*"
  #   Metadata:
  #     BuildMethod: esbuild
  #     BuildProperties:
  #       Minify: true
  #       Target: es2020
  #       EntryPoints:
  #         - lambdas/wsDefault.ts
  #       External:
  #         - aws-sdk
  # DefaultRoute:
  #   Type: "AWS::ApiGatewayV2::Route"
  #   Properties:
  #     ApiId: !Ref SamTestWebSocketApi
  #     RouteKey: "$default"
  #     Target: !Sub "integrations/${DefaultLambdaIntegration}"
  # DefaultLambdaIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref SamTestWebSocketApi
  #     Description: Default
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${wsDefault.Arn}/invocations
  # wsDefaultPermission:
  #   Type: AWS::Lambda::Permission
  #   DependsOn: wsDefault
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt wsDefault.Arn
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SamTestWebSocketApi}/*
  # wsSendMessageTickerAndTickers:
  #   Type: AWS::Serverless::Function
  #   Connectors:
  #     ConnTableManager:
  #       Properties:
  #         Destination:
  #           - Type: AWS::DynamoDB::Table
  #             Arn:
  #               Fn::ImportValue: SamTestWebSocketTableArn
  #         Permissions:
  #           - Read
  #           - Write
  #   Properties:
  #     FunctionName: wsSendMessageTickerAndTickers
  #     Tags:
  #       service: "SamTestWebsocketWSSendMessageTickerAndTickers"
  #     Handler: wsSendMessageTickerAndTickers.handler
  #     Environment:
  #       Variables:
  #         DATABASE_NAME:
  #           Fn::ImportValue: SamTestWebSocketTableName
  #         API_ENDPOINT: !Sub "https://${SamTestWebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/development/"
  #         DD_CAPTURE_LAMBDA_PAYLOAD: false
  #         DD_ENHANCED_METRICS: false
  #         DD_FLUSH_TO_LOG: true
  #         DD_MERGE_XRAY_TRACES: false
  #         DD_SERVERLESS_LOGS_ENABLED: false
  #         DD_TRACE_ENABLED: false
  #     Policies:
  #       - Version: "2012-10-17"
  #         Statement:
  #           - Effect: Allow
  #             Action:
  #               - "execute-api:ManageConnections"
  #             Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*"
  #           - Effect: "Deny"
  #             Action:
  #               - "logs:CreateLogGroup"
  #               - "logs:CreateLogStream"
  #               - "logs:PutLogEvents"
  #             Resource: "arn:aws:logs:*:*:*"
  #     Events:
  #       WebSocketRule:
  #         Type: CloudWatchEvent
  #         Properties:
  #           Pattern:
  #             source:
  #               - "sam-test.websocket"
  #             detail-type:
  #               - "sam-test.webSocket.message"
  #           EventBusName: "default" # !ImportValue SamTestEventBusArn
  #   Metadata:
  #     BuildMethod: esbuild
  #     BuildProperties:
  #       Minify: true
  #       Target: es2020
  #       EntryPoints:
  #         - lambdas/wsSendMessageTickerAndTickers.ts
  #       External:
  #         - aws-sdk
  # wsSendMessagePermission:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: "lambda:InvokeFunction"
  #     FunctionName: !GetAtt wsSendMessageTickerAndTickers.Arn
  #     Principal: "events.amazonaws.com"
  #     SourceArn: "default" # !ImportValue SamTestEventBusArn
###################################################
# - Outputs
###################################################
# Outputs:
# wsSendMessageFunctionArn:
#   Description: "Lambda Function ARN for sending message to WebSocket"
#   Value: !GetAtt wsSendMessageTickerAndTickers.Arn
#   Export:
#     Name: wsSendMessageFunctionArn
